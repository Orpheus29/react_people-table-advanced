{"version":3,"sources":["components/Navbar/Navbar.tsx","App.tsx","pages/HomePage.tsx","components/Loader/Loader.tsx","types/SortValues.ts","types/FilterBySex.ts","types/SearchParameters.ts","components/PersonLink/PersonLink.tsx","utils/api.ts","utils/constants.ts","utils/getPreparedPeople.ts","components/PersonItem/PersonItem.tsx","utils/searchHelper.ts","components/SearchLink/SearchLink.tsx","components/PeopleTable/PeopleTable.tsx","components/PeopleFilters/PeopleFilters.tsx","components/ErrorNotification/ErrorNotification.tsx","pages/PeoplePage.tsx","utils/getFilteredPeople.ts","utils/getSortedPeople.ts","pages/NotFoundPage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","Navbar","useSearchParams","restOfParams","toString","className","role","to","App","HomePage","Loader","SortValues","FilterBySex","SearchParameters","PersonLink","person","name","sex","slug","Female","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","ERRORS","CENTURY_ARRAY","getPreparedPeople","people","map","mother","find","motherName","father","fatherName","PersonItem","selectedSlug","born","died","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","searchParams","search","PeopleTable","sort","order","useParams","personSlug","handleSortClick","newSortType","isSecondClick","Sort","Order","isSortMatchValue","PeopleFilters","query","filterBySex","centuries","setSearchParams","toggleCentury","century","includes","filter","currentCentury","Sex","type","placeholder","onChange","event","Query","target","Centuries","length","ErrorNotification","errorMessage","PeoplePage","useState","setPeople","isLoading","setIsLoading","isDataFetched","setIsDataFetched","setErrorMessage","get","getAll","filteredPeople","useCallback","category","filterCondition","preparedQuery","toLowerCase","Math","ceil","getFilteredPeople","visiblePeople","useMemo","preparedPeople","a","b","Name","localeCompare","Born","Died","reverse","getSortedPeople","noPeopleOnSearchErrorCondition","isTableVisible","isFilterPanelVisible","useEffect","fetchPeople","currentPeople","NotFoundPage","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.0d248725.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink, useSearchParams } from 'react-router-dom';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => classNames(\n  'navbar-item', {\n    'has-background-grey-lighter': isActive,\n  },\n);\n\nexport const Navbar = () => {\n  const [params] = useSearchParams();\n  const restOfParams = params.toString();\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink to=\"/\" className={getLinkClass}>\n            Home\n          </NavLink>\n          <NavLink\n            to={`/people?${restOfParams}`}\n            className={getLinkClass}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navbar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export enum SortValues {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","export enum FilterBySex {\n  All = '',\n  Male = 'm',\n  Female = 'f',\n}\n","export enum SearchParameters {\n  Sex = 'sex',\n  Query = 'query',\n  Centuries = 'centuries',\n  Sort = 'sort',\n  Order = 'order',\n}\n","import React from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person, FilterBySex } from '../../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const {\n    name,\n    sex,\n    slug,\n  } = person;\n\n  const [params] = useSearchParams();\n  const restOfParams = params.toString();\n\n  return (\n    <Link\n      to={`../${slug}?${restOfParams}`}\n      className={classNames({\n        'has-text-danger': sex === FilterBySex.Female,\n      })}\n    >\n      {name}\n    </Link>\n  );\n};\n","import { Person } from '../types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export const ERRORS = {\n  DOWNLOAD_ERROR: 'Something went wrong',\n  NO_PEOPLE_ERROR: 'There are no people on the server',\n  NO_PEOPLE_ON_SEARCH_ERROR:\n  'There are no people matching the current search criteria',\n};\n\nexport const NO_PARENT_MARK = '-';\n\nexport const CENTURY_ARRAY = ['16', '17', '18', '19', '20'];\n","import { Person } from '../types/Person';\n\nexport const getPreparedPeople = (people: Person[]) => (\n  people.map(person => {\n    return {\n      ...person,\n      mother: people.find(({ name }) => name === person.motherName),\n      father: people.find(({ name }) => name === person.fatherName),\n    };\n  })\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\nimport { NO_PARENT_MARK } from '../../utils';\n\ntype Props = {\n  person: Person;\n  selectedSlug: string;\n};\n\nexport const PersonItem: React.FC<Props> = ({ person, selectedSlug }) => {\n  const {\n    sex,\n    born,\n    died,\n    fatherName,\n    motherName,\n    father,\n    mother,\n    slug,\n  } = person;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': slug === selectedSlug,\n      })}\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother\n          ? <PersonLink person={mother} />\n          : motherName || NO_PARENT_MARK}\n      </td>\n      <td>\n        {father\n          ? <PersonLink person={father} />\n          : fatherName || NO_PARENT_MARK}\n      </td>\n    </tr>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../../utils/searchHelper';\n\n/**\n * To replace the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useParams } from 'react-router-dom';\nimport { PersonItem } from '../PersonItem';\nimport { SearchLink } from '../SearchLink';\nimport { SearchParams } from '../../utils/searchHelper';\nimport { Person, SearchParameters, SortValues } from '../../types';\n\ntype Props = {\n  people: Person[];\n  sort: string;\n  order: string;\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people, sort, order }) => {\n  const { slug: personSlug = '' } = useParams();\n\n  function handleSortClick(newSortType: SortValues): SearchParams {\n    const isFirstClick = newSortType !== sort;\n    const isSecondClick = newSortType === sort && !order;\n\n    if (isFirstClick) {\n      return {\n        [SearchParameters.Sort]: newSortType,\n        [SearchParameters.Order]: null,\n      };\n    }\n\n    if (isSecondClick) {\n      return { [SearchParameters.Order]: 'desc' };\n    }\n\n    return {\n      [SearchParameters.Sort]: null,\n      [SearchParameters.Order]: null,\n    };\n  }\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {Object.entries(SortValues).map(([key, value]) => {\n            const isSortMatchValue = sort === value;\n\n            return (\n              <th key={key}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  {key}\n                  <SearchLink params={handleSortClick(value)}>\n                    <span className=\"icon\">\n                      <i className={classNames('fas', {\n                        'fa-sort': !isSortMatchValue,\n                        'fa-sort-up': isSortMatchValue && !order,\n                        'fa-sort-down': isSortMatchValue && order,\n                      })}\n                      />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n            );\n          })}\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <PersonItem\n            key={person.slug}\n            selectedSlug={personSlug}\n            person={person}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { FilterBySex, SearchParameters } from '../../types';\nimport { CENTURY_ARRAY } from '../../utils';\nimport { getSearchWith } from '../../utils/searchHelper';\nimport { SearchLink } from '../SearchLink';\n\ntype Props = {\n  query: string;\n  filterBySex: string,\n  centuries: string[],\n};\n\nexport const PeopleFilters: React.FC<Props> = ({\n  query,\n  filterBySex,\n  centuries,\n}) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  function handleQueryChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setSearchParams(\n      getSearchWith(searchParams, {\n        [SearchParameters.Query]: event.target.value || null,\n      }),\n    );\n  }\n\n  function toggleCentury(century: string) {\n    return centuries.includes(century)\n      ? centuries.filter(currentCentury => currentCentury !== century)\n      : [...centuries, century];\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        {Object.entries(FilterBySex).map(([key, value]) => (\n          <SearchLink\n            params={\n              { [SearchParameters.Sex]: value || null }\n            }\n            key={key}\n            className={classNames({\n              'is-active': value === filterBySex,\n            })}\n          >\n            {key}\n          </SearchLink>\n        ))}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURY_ARRAY.map((century) => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={classNames('button', 'mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n                params={{\n                  [SearchParameters.Centuries]: toggleCentury(century),\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames('button', 'is-success', {\n                'is-outlined': centuries.length,\n              })}\n              params={{ [SearchParameters.Centuries]: [] }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            [SearchParameters.Sex]: null,\n            [SearchParameters.Query]: null,\n            [SearchParameters.Centuries]: [],\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { ERRORS } from '../../utils';\n\ntype Props = {\n  errorMessage: string;\n};\n\nexport const ErrorNotification: React.FC<Props> = ({ errorMessage }) => (\n  <p\n    data-cy={errorMessage === ERRORS.DOWNLOAD_ERROR\n      ? 'peopleLoadingError'\n      : errorMessage === ERRORS.NO_PEOPLE_ERROR\n        && 'noPeopleMessage'}\n    className={classNames({\n      'has-text-danger': errorMessage === ERRORS.DOWNLOAD_ERROR,\n    })}\n  >\n    {errorMessage}\n  </p>\n);\n","import {\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n} from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport {\n  Loader,\n  PeopleTable,\n  PeopleFilters,\n  ErrorNotification,\n} from '../components';\nimport {\n  ERRORS,\n  getPeople,\n  getSortedPeople,\n  getFilteredPeople,\n  getPreparedPeople,\n} from '../utils';\nimport { Person, SearchParameters } from '../types';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDataFetched, setIsDataFetched] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get(SearchParameters.Query) || '';\n  const filterBySex = searchParams.get(SearchParameters.Sex) || '';\n  const centuries = searchParams.getAll(SearchParameters.Centuries) || [];\n  const sort = searchParams.get(SearchParameters.Sort) || '';\n  const order = searchParams.get(SearchParameters.Order) || '';\n\n  const filteredPeople = useCallback(() => getFilteredPeople(\n    filterBySex, query, centuries, people,\n  ), [filterBySex, query, centuries, people]);\n\n  const visiblePeople = useMemo(() => {\n    return getSortedPeople(sort, order, filteredPeople());\n  }, [sort, order, filteredPeople]);\n\n  const noPeopleOnSearchErrorCondition = !visiblePeople.length\n  && isDataFetched && !errorMessage;\n\n  const isTableVisible = !errorMessage && !!visiblePeople.length;\n\n  const isFilterPanelVisible = isTableVisible\n  || errorMessage === ERRORS.NO_PEOPLE_ON_SEARCH_ERROR;\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchPeople = async () => {\n      try {\n        const currentPeople = await getPeople();\n\n        if (!currentPeople.length) {\n          setErrorMessage(ERRORS.NO_PEOPLE_ERROR);\n        }\n\n        setPeople(getPreparedPeople(currentPeople));\n        setIsDataFetched(true);\n      } catch (error) {\n        setErrorMessage(ERRORS.DOWNLOAD_ERROR);\n        setIsDataFetched(false);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchPeople();\n  }, []);\n\n  useEffect(() => {\n    if (noPeopleOnSearchErrorCondition) {\n      setErrorMessage(ERRORS.NO_PEOPLE_ON_SEARCH_ERROR);\n    } else if (errorMessage !== ERRORS.NO_PEOPLE_ERROR) {\n      setErrorMessage('');\n    }\n  }, [visiblePeople.length, isDataFetched]);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {(isFilterPanelVisible) && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters\n                query={query}\n                filterBySex={filterBySex}\n                centuries={centuries}\n              />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {errorMessage && (\n                <ErrorNotification errorMessage={errorMessage} />\n              )}\n\n              {isTableVisible && (\n                <PeopleTable\n                  people={visiblePeople}\n                  sort={sort}\n                  order={order}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\n\nexport function getFilteredPeople(\n  category: string,\n  query: string,\n  centuries: string[],\n  people: Person[],\n) {\n  const preparedPeople = people.filter(({\n    sex,\n    name,\n    born,\n    motherName,\n    fatherName,\n  }) => {\n    let filterCondition = true;\n\n    if (category) {\n      filterCondition = sex === category;\n    }\n\n    if (query) {\n      const preparedQuery = query.toLowerCase();\n\n      filterCondition = filterCondition\n        && (name.toLowerCase().includes(preparedQuery)\n          || (motherName?.toLowerCase().includes(preparedQuery) || false)\n          || (fatherName?.toLowerCase().includes(preparedQuery) || false));\n    }\n\n    if (centuries.length) {\n      filterCondition = filterCondition\n        && centuries.includes(`${Math.ceil(born / 100)}`);\n    }\n\n    return filterCondition;\n  });\n\n  return preparedPeople;\n}\n","import { Person, SortValues } from '../types';\n\nexport function getSortedPeople(sort: string, order: string, people: Person[]) {\n  const preparedPeople = [...people];\n\n  if (sort) {\n    preparedPeople.sort((a, b) => {\n      switch (sort) {\n        case SortValues.Name:\n          return a.name.localeCompare(b.name);\n        case SortValues.Sex:\n          return a.sex.localeCompare(b.sex);\n        case SortValues.Born:\n          return a.born - b.born;\n        case SortValues.Died:\n          return a.died - b.died;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (order) {\n    preparedPeople.reverse();\n  }\n\n  return preparedPeople;\n}\n","export const NotFoundPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import {\n  HashRouter as Router,\n  Route,\n  Routes,\n  Navigate,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage, PeoplePage, NotFoundPage } from './pages';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<HomePage />} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"people\">\n          <Route path=\":slug?\" element={<PeoplePage />} />\n        </Route>\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}